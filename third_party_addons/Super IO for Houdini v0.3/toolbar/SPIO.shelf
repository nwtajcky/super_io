<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="SPIO" label="Super IO">
    <memberTool name="spio_import"/>
    <memberTool name="spio_export"/>
  </toolshelf>

  <tool name="spio_export" label="Super export" icon="$SPIO/icons/export.tiff">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[# log
# v0.1
# initial win
# v0.2
# add export format menu
# v0.3
# add alembic animation export

from __future__ import annotations

import sys

import hou
import os
import numpy as np

# Custom Temp Path
TEMP_DIR = ''

# label in the popup list
export_labels = [
    'Wavefront (.obj)',
    'Alembic (.abc)',
    'OpenVDB (.vdb)',
    'Stl (.stl)',
    'AutoCAD DXF(.dxf)',
    'Stanford (.ply)',
    # animation format
    'Alembic Animation (.abc)'
]

# format to export
export_formats = [
    'obj', 'abc', 'vdb', 'stl', 'dxf', 'ply',
    'anim-abc'
]


def get_dir():
    """get temp dir

    """
    global TEMP_DIR
    if TEMP_DIR == '':
        TEMP_DIR = os.path.join(os.path.expanduser('~'), 'spio_temp')
        if not "spio_temp" in os.listdir(os.path.expanduser('~')):
            os.makedirs(TEMP_DIR)
    return TEMP_DIR


def get_export_config():
    """create pop up list

    """
    index = hou.ui.selectFromList(export_labels,
                                  default_choices=(), exclusive=True, message="Select a format to export",
                                  title='Super Export',
                                  column_header=None,
                                  num_visible_rows=10, clear_on_cancel=False, width=250, height=300)
    return index[0] if len(index) != 0 else None


def main():
    """run the whole script

    """
    if sys.platform != "win32":
        return print("Not Support this platform!")

    # create or set nodes
    if len(hou.selectedNodes()) == 0:
        return

    file_list = list()

    res = get_export_config()
    if res is None: return

    # get ext
    ext = export_formats[res]

    for node in hou.selectedNodes():
        # get name
        name = node.path().split('/')[-1]

        # current frame
        if not ext.startswith('anim'):
            filepath = os.path.join(get_dir(), name + '.' + ext)
            node.geometry().saveToFile(filepath)
            file_list.append(filepath)

        # animation file
        elif ext == 'anim-abc':
            filepath = os.path.join(get_dir(), name + '.' + 'abc')

            # create_node
            paneTabObj = hou.ui.paneTabUnderCursor()
            parent = paneTabObj.pwd()
            r_node = parent.createNode('rop_alembic')

            # set position, not need, will destroy node later
            # net_editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
            # cursor_pos = net_editor.cursorPosition()
            # pos = np.subtract(cursor_pos, [-0.5, -1])
            # r_node.setPosition(pos)

            # connect, set parm
            r_node.setInput(0, node)
            r_node.parm('filename').set(filepath)
            r_node.parm('trange').set(1)
            # render
            r_node.render(output_progress=True)  # log window

            # destroy
            r_node.destroy()
            file_list.append(filepath)

    # push to clipboard
    clipboard = PowerShellClipboard()
    clipboard.push_to_clipboard(paths=file_list)


#### Clipboard ####

import subprocess


class PowerShellClipboard():
    def __init__(self, file_urls=None):
        pass

    def get_args(self, script):
        powershell_args = [
            os.path.join(
                os.getenv("SystemRoot"),
                "System32",
                "WindowsPowerShell",
                "v1.0",
                "powershell.exe",
            ),
            "-NoProfile",
            "-NoLogo",
            "-NonInteractive",
            "-WindowStyle",
            "Hidden",
        ]
        script = (
                "$OutputEncoding = "
                "[System.Console]::OutputEncoding = "
                "[System.Console]::InputEncoding = "
                "[System.Text.Encoding]::UTF8; "
                + "$PSDefaultParameterValues['*:Encoding'] = 'utf8'; "
                + script
        )
        args = powershell_args + ["& { " + script + " }"]
        return args

    def push(self, script):
        parms = {
            'args': self.get_args(script),
            'encoding': 'utf-8',
            'stdout': subprocess.PIPE,
            'stderr': subprocess.PIPE,
        }

        subprocess.Popen(**parms)

    def push_to_clipboard(self, paths):
        join_s = ""

        for path in paths:
            join_s += f", '{path}'"

        script = (
            f"$filelist = {join_s};"
            "$col = New-Object Collections.Specialized.StringCollection; "
            "foreach($file in $filelist){$col.add($file)}; "
            "Add-Type -Assembly System.Windows.Forms; "
            "[System.Windows.Forms.Clipboard]::SetFileDropList($col); "
        )

        self.push(script)


# run
main()
]]></script>
  </tool>

  <tool name="spio_import" label="Super import" icon="$SPIO/icons/import.tiff">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[# log
# v0.1
# initial win
# v0.2
# add more ext support, add abc/usd node support

from __future__ import annotations

import sys
import ctypes
import ctypes.wintypes as w

from locale import getdefaultlocale

import hou
import numpy as np

# change it to 'True' if your system encode if utf-8 (win)
FORCE_UNICORE = False

# Extension Config
ext_config = {
    'obj': 'file',
    'fbx': 'file',
    'stl': 'file',
    'dae': 'file',
    'abc': 'alembic',
    'usd': 'usdimport',
    'usda': 'usdimport',
    'usdc': 'usdimport',
}

# file node parm config
node_parm_config = {
    'file': 'file',
    'alembic': 'fileName',
    'usdimport': 'filepath1',
}


def main():
    if sys.platform != "win32":
        return print("Not Support this platform!")

    clipboard = WintypesClipboard()
    file_list = clipboard.pull(force_unicode=FORCE_UNICORE)
    del clipboard  # release clipboard

    if len(file_list) == 0:
        return print('No files found!')
    # remove extra files
    file_list = [file for file in file_list if file.split('.')[-1] in ext_config]

    # get context editor and mouse pos
    net_editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    cursor_pos = net_editor.cursorPosition()

    # create or set nodes
    if len(hou.selectedNodes()) == 0:
        paneTabObj = hou.ui.paneTabUnderCursor()
        parent = paneTabObj.pwd()
        create_node_from_path_list(parent, file_list, cursor_pos)

    elif len(hou.selectedNodes()) == 1:
        node = hou.selectedNodes()[-1]

        set_node_path(node, file_list[0])
        file_list = file_list[1:]
        node.setSelected(True, clear_all_selected=True)

        parent = node.parent()

        create_node_from_path_list(parent, file_list, cursor_pos)


def create_node_from_path_list(obj, file_list, start_pos):
    for i, file in enumerate(file_list):
        node = obj.createNode(ext_config.get(file.split('.')[-1]))
        pos = np.subtract(start_pos, [-0.5, 1 * i])
        node.setPosition(pos)
        set_node_path(node, file)
        node.setSelected(True, clear_all_selected=True)


def set_node_path(node, path):
    for type, node_parm in node_parm_config.items():
        try:
            if node.type() == hou.sopNodeTypeCategory().nodeTypes()[type]:
                node.parm(node_parm).set(path)
                break
        except Exception:
            print(f'Config {type}:{node_parm} Error!')


class WintypesClipboard():
    def __init__(self, file_urls=None):
        # file_urls: list[str] = None
        self.file_urls = file_urls

        self.CF_HDROP = 15

        u32 = ctypes.windll.user32
        k32 = ctypes.windll.kernel32
        s32 = ctypes.windll.shell32

        self.OpenClipboard = u32.OpenClipboard
        self.OpenClipboard.argtypes = w.HWND,
        self.OpenClipboard.restype = w.BOOL

        self.GetClipboardData = u32.GetClipboardData
        self.GetClipboardData.argtypes = w.UINT,
        self.GetClipboardData.restype = w.HANDLE

        self.SetClipboardData = u32.SetClipboardData

        self.CloseClipboard = u32.CloseClipboard
        self.CloseClipboard.argtypes = None
        self.CloseClipboard.restype = w.BOOL

        self.DragQueryFile = s32.DragQueryFile
        self.DragQueryFile.argtypes = [w.HANDLE, w.UINT, ctypes.c_void_p, w.UINT]

    def pull(self, force_unicode=False):
        self.file_urls = []

        if self.OpenClipboard(None):
            h_hdrop = self.GetClipboardData(self.CF_HDROP)

            if h_hdrop:
                # expose force unicode to preferences(if enabled unicode beta setting)
                FS_ENCODING = getdefaultlocale()[1] if not force_unicode else 'utf-8'
                file_count = self.DragQueryFile(h_hdrop, -1, None, 0)

                for index in range(file_count):
                    buf = ctypes.c_buffer(260)
                    self.DragQueryFile(h_hdrop, index, buf, ctypes.sizeof(buf))
                    self.file_urls.append(buf.value.decode(FS_ENCODING))

        self.CloseClipboard()
        return self.file_urls


main()
]]></script>
  </tool>
</shelfDocument>
